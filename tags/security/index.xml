<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on CloudBees Technologists</title>
    <link>https://technologists.dev/tags/security/</link>
    <description>Recent content in security on CloudBees Technologists</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Oct 2019 09:05:15 -0400</lastBuildDate>
    
	<atom:link href="https://technologists.dev/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Securely Using Cloud Services from Jenkins Kubernetes Agents</title>
      <link>https://technologists.dev/posts/best-practices-for-cloudbees-core-jenkins-on-kubernetes/securely-using-cloud-services-from-jenkins-kubernetes-agents/</link>
      <pubDate>Sun, 20 Oct 2019 09:05:15 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/best-practices-for-cloudbees-core-jenkins-on-kubernetes/securely-using-cloud-services-from-jenkins-kubernetes-agents/</guid>
      <description>In the second part of this series on best practices for Jenkins (and CloudBees Core) on Kubernetes we will continue to look at security. In this post we will look at how to reduce security risk of using cloud services from Jenkins Kubernetes agents, similar to how the previous post in this series showed how Kubernetes Pod Security Policies can be used with Jenkins Kubernetes agents to limit the security risk of Jenkins agent containers.</description>
    </item>
    
    <item>
      <title>Using Kubernetes Pod Security Policies with CloudBees Core - Jenkins</title>
      <link>https://technologists.dev/posts/best-practices-for-cloudbees-core-jenkins-on-kubernetes/core-psp/</link>
      <pubDate>Wed, 04 Sep 2019 05:05:15 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/best-practices-for-cloudbees-core-jenkins-on-kubernetes/core-psp/</guid>
      <description>What are Pod Security Policies? Although Kubernetes Pod Security Policies are still a beta feature of Kubernetes they are an important security feature that should not be overlooked. Pod Security Policies (PSPs) are built-in Kubernetes resources that allow you to enforce security related properties of every container in your cluster. If a container in a pod does not meet the criteria for an applicable PSP then it will not be scheduled to run.</description>
    </item>
    
    <item>
      <title>Securely Building Container Images on Kubernetes</title>
      <link>https://technologists.dev/posts/build-continaer-images/</link>
      <pubDate>Sat, 03 Aug 2019 10:05:15 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/build-continaer-images/</guid>
      <description>Originally published on kurtmadel.com
Back in 2013, before Kubernetes was a thing, Docker was making Linux containers (LXC) much more accessible and use of Docker based containers took off (and Docker quickly dropped LXC as the default execution engine for their own container runtime). At the same time continuous integration (CI) was rapidly maturing as a best practice and a necessity for efficient software delivery. The use of Docker containers with CI was quickly adopted as the best way to manage CI tools - compilers, testing tools, security scans, etc.</description>
    </item>
    
    <item>
      <title>Safety First with Jenkins and Snyk</title>
      <link>https://technologists.dev/posts/jenkins-snyk/</link>
      <pubDate>Wed, 31 Jul 2019 07:00:00 +0000</pubDate>
      
      <guid>https://technologists.dev/posts/jenkins-snyk/</guid>
      <description>Implementing security scanning as a preventative measure in your CI pipeline. Overview Today’s developers are being empowered to expeditiously innovate, creating new software capabilities and building continuous customer value. At CloudBees, we commonly tell our customers:
 &amp;ldquo;Every business is a software business and is under pressure to innovate constantly. This increased velocity introduces new business risks. CloudBees is building the world&amp;rsquo;s first end-to-end automated software delivery system (SDM), enabling companies to balance governance and developer freedom.</description>
    </item>
    
    <item>
      <title>Technologists Lightning Talks for DevOps World | Jenkins World 2019 San Francisco</title>
      <link>https://technologists.dev/posts/lightning-talks-dw-jw-2019/</link>
      <pubDate>Sat, 27 Jul 2019 10:50:46 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/lightning-talks-dw-jw-2019/</guid>
      <description>The Technologists will be giving a bunch of lightning talks in the DevOps Theater at this years DevOps World | Jenkins World in San Francisco. Some of the topics we will be covering include (many of which we have already blogged about):
 Self-Updating Jenkins: GitOps for Jenkins Configuration  This Lightning Talk will explore using GitOps to automate config updates for the CloudBees Jenkins Distribution.  Jenkins Plugin Management as Code  Let’s admit it, Jenkins Plugin management can be a pain.</description>
    </item>
    
    <item>
      <title>CloudBees&#39; Cross Team Collaboration for Asynchronous DevSecOps</title>
      <link>https://technologists.dev/posts/cloudbees-cross-team-and-dev-sec-ops/</link>
      <pubDate>Mon, 10 Jun 2019 07:50:46 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/cloudbees-cross-team-and-dev-sec-ops/</guid>
      <description>What is Cross Team Collaboration? CloudBees&amp;rsquo; Cross Team Collaboration provides the ability to publish an event from a Jenkins job that triggers any other Jenkins job on the same master or different masters that are listening for that event. It is basically a light-weight PubSub for CloudBees Core Masters connected to CloudBees Operations Center. Jenkins has had the ability to trigger other jobs for quite a while now (and with CloudBees this is even easy to do across Masters), but it always required that the upstream job be aware of the downstream job(s) to be triggered.</description>
    </item>
    
  </channel>
</rss>