<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CD on CloudBees Technologists</title>
    <link>https://technologists.dev/tags/cd/</link>
    <description>Recent content in CD on CloudBees Technologists</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Nov 2019 05:05:15 -0400</lastBuildDate>
    
	<atom:link href="https://technologists.dev/tags/cd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Serverless Preview Environments and GitOps with CloudBees Core and Google Cloud Run</title>
      <link>https://technologists.dev/posts/cloud-run-with-core/</link>
      <pubDate>Wed, 20 Nov 2019 05:05:15 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/cloud-run-with-core/</guid>
      <description>Google Cloud Run is Google Cloud&amp;rsquo;s serverless platform for stateless containerized applications that leverage HTTP and event driven workloads. Cloud Run can be fully managed or you can use Cloud Run for Anthos to deploy applications in an Anthos GKE cluster running on Google Cloud or on-premises.
CloudBees Core is an enterprise version of Jenkins that provides better scalability, manageability, security and availability by running on and leveraging Kubernetes.</description>
    </item>
    
    <item>
      <title>Securely Using Cloud Services from Jenkins Kubernetes Agents</title>
      <link>https://technologists.dev/posts/best-practices-for-cloudbees-core-jenkins-on-kubernetes/securely-using-cloud-services-from-jenkins-kubernetes-agents/</link>
      <pubDate>Sun, 20 Oct 2019 09:05:15 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/best-practices-for-cloudbees-core-jenkins-on-kubernetes/securely-using-cloud-services-from-jenkins-kubernetes-agents/</guid>
      <description>In the second part of this series on best practices for Jenkins (and CloudBees Core) on Kubernetes we will continue to look at security. In this post we will look at how to reduce security risk of using cloud services from Jenkins Kubernetes agents, similar to how the previous post in this series showed how Kubernetes Pod Security Policies can be used with Jenkins Kubernetes agents to limit the security risk of Jenkins agent containers.</description>
    </item>
    
    <item>
      <title>Using Kubernetes Pod Security Policies with CloudBees Core - Jenkins</title>
      <link>https://technologists.dev/posts/best-practices-for-cloudbees-core-jenkins-on-kubernetes/core-psp/</link>
      <pubDate>Wed, 04 Sep 2019 05:05:15 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/best-practices-for-cloudbees-core-jenkins-on-kubernetes/core-psp/</guid>
      <description>What are Pod Security Policies? Although Kubernetes Pod Security Policies are still a beta feature of Kubernetes they are an important security feature that should not be overlooked. Pod Security Policies (PSPs) are built-in Kubernetes resources that allow you to enforce security related properties of every container in your cluster. If a container in a pod does not meet the criteria for an applicable PSP then it will not be scheduled to run.</description>
    </item>
    
    <item>
      <title>Securely Building Container Images on Kubernetes</title>
      <link>https://technologists.dev/posts/build-continaer-images/</link>
      <pubDate>Sat, 03 Aug 2019 10:05:15 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/build-continaer-images/</guid>
      <description>Originally published on kurtmadel.com
Back in 2013, before Kubernetes was a thing, Docker was making Linux containers (LXC) much more accessible and use of Docker based containers took off (and Docker quickly dropped LXC as the default execution engine for their own container runtime). At the same time continuous integration (CI) was rapidly maturing as a best practice and a necessity for efficient software delivery. The use of Docker containers with CI was quickly adopted as the best way to manage CI tools - compilers, testing tools, security scans, etc.</description>
    </item>
    
  </channel>
</rss>