<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on CloudBees Technologists</title>
    <link>https://technologists.dev/tags/kubernetes/</link>
    <description>Recent content in kubernetes on CloudBees Technologists</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Nov 2019 05:05:15 -0400</lastBuildDate>
    
	<atom:link href="https://technologists.dev/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Serverless Preview Environments and GitOps with CloudBees Core and Google Cloud Run</title>
      <link>https://technologists.dev/posts/cloud-run-with-core/</link>
      <pubDate>Wed, 20 Nov 2019 05:05:15 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/cloud-run-with-core/</guid>
      <description>Google Cloud Run is Google Cloud&amp;rsquo;s serverless platform for stateless containerized applications that leverage HTTP and event driven workloads. Cloud Run can be fully managed or you can use Cloud Run for Anthos to deploy applications in an Anthos GKE cluster running on Google Cloud or on-premises.
CloudBees Core is an enterprise version of Jenkins that provides better scalability, manageability, security and availability by running on and leveraging Kubernetes.</description>
    </item>
    
    <item>
      <title>Using Windows containers with Jenkins on Kubernetes 1.14</title>
      <link>https://technologists.dev/posts/windows-containers/</link>
      <pubDate>Mon, 18 Nov 2019 17:00:00 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/windows-containers/</guid>
      <description>Kubernetes 1.14 was released in March 2019 and the release brought production support for Windows Containers on Windows Server nodes. Before moving on, I would like to highlight a few things from the previous link:
 Kubernetes control plane runs in Linux (and there is no plan to change that for a full Windows Kubernetes cluster) Versions supported for worker nodes and containers: Windows Server 1809/Windows Server 2019 Windows containers have to be scheduled on Windows nodes  At the time this post was written (Nov 19), AKS, GKE and EKS offer some level of support for Windows based containers (EKS is the first to offer GA support for Windows based containers).</description>
    </item>
    
    <item>
      <title>Unprivileged Container Image Builds with img and Jenkins on Kubernetes</title>
      <link>https://technologists.dev/posts/building-images-with-img/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://technologists.dev/posts/building-images-with-img/</guid>
      <description>Why use img for container builds? As more organizations turn to containers and Kubernetes to manage their CI/CD workloads, numerous strategies have emerged to handle the actual building of container images within these containerized environments. However, each of these approaches have not been without their security drawbacks (see Kurt Madel&amp;rsquo;s recent post on &amp;ldquo;Securely Building Container Images on Kubernetes&amp;rdquo; for a rundown of these approaches and their security implications.)</description>
    </item>
    
    <item>
      <title>Securely Using Cloud Services from Jenkins Kubernetes Agents</title>
      <link>https://technologists.dev/posts/best-practices-for-cloudbees-core-jenkins-on-kubernetes/securely-using-cloud-services-from-jenkins-kubernetes-agents/</link>
      <pubDate>Sun, 20 Oct 2019 09:05:15 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/best-practices-for-cloudbees-core-jenkins-on-kubernetes/securely-using-cloud-services-from-jenkins-kubernetes-agents/</guid>
      <description>In the second part of this series on best practices for Jenkins (and CloudBees Core) on Kubernetes we will continue to look at security. In this post we will look at how to reduce security risk of using cloud services from Jenkins Kubernetes agents, similar to how the previous post in this series showed how Kubernetes Pod Security Policies can be used with Jenkins Kubernetes agents to limit the security risk of Jenkins agent containers.</description>
    </item>
    
    <item>
      <title>Using Kubernetes Pod Security Policies with CloudBees Core - Jenkins</title>
      <link>https://technologists.dev/posts/best-practices-for-cloudbees-core-jenkins-on-kubernetes/core-psp/</link>
      <pubDate>Wed, 04 Sep 2019 05:05:15 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/best-practices-for-cloudbees-core-jenkins-on-kubernetes/core-psp/</guid>
      <description>What are Pod Security Policies? Although Kubernetes Pod Security Policies are still a beta feature of Kubernetes they are an important security feature that should not be overlooked. Pod Security Policies (PSPs) are built-in Kubernetes resources that allow you to enforce security related properties of every container in your cluster. If a container in a pod does not meet the criteria for an applicable PSP then it will not be scheduled to run.</description>
    </item>
    
    <item>
      <title>Securely Building Container Images on Kubernetes</title>
      <link>https://technologists.dev/posts/build-continaer-images/</link>
      <pubDate>Sat, 03 Aug 2019 10:05:15 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/build-continaer-images/</guid>
      <description>Originally published on kurtmadel.com
Back in 2013, before Kubernetes was a thing, Docker was making Linux containers (LXC) much more accessible and use of Docker based containers took off (and Docker quickly dropped LXC as the default execution engine for their own container runtime). At the same time continuous integration (CI) was rapidly maturing as a best practice and a necessity for efficient software delivery. The use of Docker containers with CI was quickly adopted as the best way to manage CI tools - compilers, testing tools, security scans, etc.</description>
    </item>
    
    <item>
      <title>Technologists Lightning Talks for DevOps World | Jenkins World 2019 San Francisco</title>
      <link>https://technologists.dev/posts/lightning-talks-dw-jw-2019/</link>
      <pubDate>Sat, 27 Jul 2019 10:50:46 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/lightning-talks-dw-jw-2019/</guid>
      <description>The Technologists will be giving a bunch of lightning talks in the DevOps Theater at this years DevOps World | Jenkins World in San Francisco. Some of the topics we will be covering include (many of which we have already blogged about):
 Self-Updating Jenkins: GitOps for Jenkins Configuration  This Lightning Talk will explore using GitOps to automate config updates for the CloudBees Jenkins Distribution.  Jenkins Plugin Management as Code  Letâ€™s admit it, Jenkins Plugin management can be a pain.</description>
    </item>
    
    <item>
      <title>Introduction to GitOps - Part 1</title>
      <link>https://technologists.dev/posts/gitops-series-part-1/</link>
      <pubDate>Tue, 16 Jul 2019 15:00:00 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/gitops-series-part-1/</guid>
      <description>GitOps is a concept that was first coined by Weaveworks in their GitOps - Operations by Pull Request post. The idea itself wasn&amp;rsquo;t anything particularly new, people had been doing automated operations with infrastructure-as-code for years. But now that there was a descriptive new name for this concept, the DevOps community has really started to embrace it. Especially with the ever growing prevalence of Kubernetes.
If you haven&amp;rsquo;t already done so, I&amp;rsquo;d recommend reading that Weaveworks post since it is always good to understand the origination of a concept.</description>
    </item>
    
    <item>
      <title>Self-Updating Jenkins: GitOps for Jenkins Configuration</title>
      <link>https://technologists.dev/posts/cjd-casc/</link>
      <pubDate>Wed, 03 Jul 2019 17:00:00 -0400</pubDate>
      
      <guid>https://technologists.dev/posts/cjd-casc/</guid>
      <description>In this blog post, we&amp;rsquo;ll walk through creating a self-updating instance of the CloudBees Jenkins Distribution, with all configuration stored as code in a GitHub repository.
We&amp;rsquo;ll deploy the CJD master as a StatefulSet in a Kubernetes cluster, configure the master using the Jenkins Configuration as Code plugin, and set up a TLS certificate through cert-manager. Finally, we&amp;rsquo;ll seed a Pipeline job that updates the master upon commit to the Git repository that contains the configuration - enabling GitOps for Jenkins itself.</description>
    </item>
    
  </channel>
</rss>